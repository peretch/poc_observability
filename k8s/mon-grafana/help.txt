# Grafana Configuration Help

## Overview
Grafana is a visualization and analytics platform that connects to Prometheus to create beautiful dashboards for your metrics.

## Files in this directory:

### mon-grafana-deployment.yaml
- **Deployment**: Runs Grafana container with persistent storage
- **Environment**: Sets admin password and disables signup
- **Plugins**: Installs piechart plugin for better visualizations
- **Volumes**: Mounts persistent storage, datasource config, and dashboards

### mon-grafana-service.yaml
- **Service**: Exposes Grafana on port 3000 within the cluster
- **Type**: ClusterIP (internal access only)

### mon-grafana-pvc.yaml
- **PersistentVolumeClaim**: Provides 1GB storage for Grafana data
- **Storage**: Uses local-path storage class for development

### mon-grafana-datasources.yaml
- **ConfigMap**: Configures Prometheus as the default data source
- **URL**: Points to mon-prometheus:9090 service
- **Auto-configuration**: Grafana automatically loads this config

### mon-grafana-dashboards.yaml
- **ConfigMap**: Contains three pre-built dashboards:
  1. **Authentication Metrics**: Auth attempts, success rates, OAuth usage
  2. **HTTP Performance**: Request rates, response times, error rates
  3. **System Metrics**: Memory, CPU, event loop, garbage collection

## Key Concepts:

### Dashboards
- **Authentication Metrics**: Tracks login/register/OAuth success rates
- **HTTP Performance**: Monitors API response times and error rates  
- **System Metrics**: Node.js runtime performance and resource usage

### Metrics Types
- **Counters**: Cumulative values (auth_attempts_total)
- **Gauges**: Current values (active_sessions_total)
- **Histograms**: Request duration distributions
- **Rates**: Calculated from counters over time

### Access
- **URL**: http://localhost:3000 (after port-forward)
- **Login**: admin / admin123
- **Dashboards**: Auto-loaded from ConfigMap

## Usage Tips:
1. Use time range selectors to focus on specific periods
2. Set up alerts for critical thresholds (high error rates, memory usage)
3. Create custom dashboards for specific use cases
4. Export dashboard JSON for version control
